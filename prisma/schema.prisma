// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum BlockType {
  text
}

enum AccessType {
  free
  paid
}

enum WorkoutDifficulty {
  EASY
  MEDIUM
  HARD
}

enum MealCategory {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  SALAD
  DESSERT
  SOUP
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
}

enum WorkoutType {
  WARMUP // Зарядка
  POSTURE // Осанка
  STRENGTH // Силовая
  MOBILITY // Мобильность
  CARDIO
}

enum DailyContentType {
  WARMUP
  MAIN
}

enum CourseContentType {
  FIXED_COURSE // Фиксированный курс
  SUBSCRIPTION // Курс для подписки
}

enum MuscleGroup {
  LEGS
  GLUTES
  UPPER_BODY
  BACK
  PELVIC_FLOOR
  CORE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum PaymentState {
  pending
  success
  failed
}

enum UserAccessReason {
  paid
  free
  manual
}

model Course {
  id                    String            @id @default(cuid())
  slug                  String            @unique
  title                 String
  description           String
  shortDescription      String?
  thumbnail             String
  image                 String
  draft                 Boolean
  durationWeeks         Int
  allowedWorkoutDaysPerWeek Int[]        @default([])
  contentType           CourseContentType @default(FIXED_COURSE)
  product               CourseProduct?

  dailyPlans DailyPlan[] // Дни (планы) в фиксированном курсе
  weeks      Week[] // Недели для подписочных курсов

  enrollments UserCourseEnrollment[]
  mealPlans   MealPlan[]

  dependencies CourseDependency[] @relation("CourseDependencies")
  dependents   CourseDependency[] @relation("CourseDependents")
}

model UserCourseEnrollment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  selectedWorkoutDays DayOfWeek[]
  startDate           DateTime

  hasFeedback Boolean @default(false) // Куплена ли версия с обратной связью

  userDailyPlans     UserDailyPlan[] // Связь с ежедневными планами пользователя
  workoutCompletions UserWorkoutCompletion[]
  active             Boolean                 @default(false) // Активен ли курс для пользователя
  userAccess         UserAccess?             @relation

  @@unique([userId, courseId]) // Пользователь может быть зачислен на курс только один раз
  @@index([userId, startDate])
}

model Week {
  id         String      @id @default(cuid())
  weekNumber Int
  releaseAt  DateTime
  courseId   String
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  dailyPlans DailyPlan[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@unique([courseId, weekNumber])
  @@map("weeks")
}

model DailyPlan {
  id              String         @id @default(cuid())
  slug            String // Например, "week-1-day-1"
  dayNumberInWeek Int // 1-7
  weekNumber      Int
  description     String?
  contentBlocks   ContentBlock[] // Если нужны дополнительные текстовые блоки в дне

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Для подписочных курсов - связь с неделей
  weekId String?
  week   Week?   @relation(fields: [weekId], references: [id], onDelete: Cascade)

  warmupId String
  warmup   Workout @relation("WarmupDailyPlan", fields: [warmupId], references: [id])

  mainWorkoutId String?
  mainWorkout   Workout? @relation("MainWorkoutDailyPlan", fields: [mainWorkoutId], references: [id])

  mealPlanId String?
  mealPlan   MealPlan? @relation(fields: [mealPlanId], references: [id], onDelete: SetNull)

  userDailyPlans UserDailyPlan[] @relation("OriginalDailyPlan")

  @@unique([courseId, slug])
  @@unique([courseId, weekNumber, dayNumberInWeek])
}

model UserDailyPlan {
  id                  String                  @id @default(cuid())
  userId              String
  enrollmentId        String
  date                DateTime
  dayNumberInCourse   Int
  isWorkoutDay        Boolean
  warmupId            String
  mainWorkoutId       String?
  mealPlanId          String?
  dayOfWeek           DayOfWeek
  weekNumber          Int
  warmupStepIndex     Int
  mainWorkoutStepIndex Int?
  enrollment          UserCourseEnrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  mainWorkout         Workout?                @relation("UserDailyMainWorkout", fields: [mainWorkoutId], references: [id])
  mealPlan            MealPlan?               @relation("UserDailyMealPlan", fields: [mealPlanId], references: [id], onDelete: SetNull)
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  warmup              Workout                 @relation("UserDailyWarmup", fields: [warmupId], references: [id])
  originalDailyPlanId String
  originalDailyPlan   DailyPlan               @relation("OriginalDailyPlan", fields: [originalDailyPlanId], references: [id])

  @@unique([enrollmentId, dayNumberInCourse]) // Один план на день для каждого enrollment
  @@index([enrollmentId])
  @@index([userId, date])
}

model Workout {
  id                    String            @id @default(cuid())
  title                 String
  type                  WorkoutType
  difficulty            WorkoutDifficulty
  equipment             String[]
  description           String?
  videoId               String?
  muscles               MuscleGroup[]
  slug                  String            @unique
  mainWorkoutDailyPlans DailyPlan[]       @relation("MainWorkoutDailyPlan")
  warmupDailyPlans      DailyPlan[]       @relation("WarmupDailyPlan")

  userDailyMainWorkouts UserDailyPlan[]         @relation("UserDailyMainWorkout")
  userDailyWarmups      UserDailyPlan[]         @relation("UserDailyWarmup")
  favoriteWorkouts      UserFavoriteWorkout[]
  userCompletions       UserWorkoutCompletion[]

  // Kinescope metadata
  durationSec Int     @default(0)
  poster      Json?
  posterUrl   String?
  progress    Int?
}

model UserWorkoutCompletion {
  id                  String               @id @default(cuid())
  userId              String
  workoutId           String
  enrollmentId        String
  completedAt         DateTime             @default(now())
  workoutType         WorkoutType
  contentType         DailyContentType
  stepIndex           Int
  enrollment          UserCourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout             Workout              @relation(fields: [workoutId], references: [id])

  @@unique([userId, enrollmentId, contentType, stepIndex])
  @@index([userId])
  @@index([enrollmentId])
}

model MealPlan {
  id                String          @id @default(cuid())
  title             String
  description       String?
  breakfastRecipeId String
  courseId          String
  dinnerRecipeId    String
  lunchRecipeId     String
  slug              String
  dailyPlans        DailyPlan[]
  breakfastRecipe   Recipe          @relation("BreakfastMeal", fields: [breakfastRecipeId], references: [id])
  course            Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  dinnerRecipe      Recipe          @relation("DinnerMeal", fields: [dinnerRecipeId], references: [id])
  lunchRecipe       Recipe          @relation("LunchMeal", fields: [lunchRecipeId], references: [id])
  userDailyPlans    UserDailyPlan[] @relation("UserDailyMealPlan")

  @@unique([courseId, slug])
  @@index([courseId])
}

model Recipe {
  id                     String               @id @default(cuid())
  title                  String
  description            String?
  preparationTimeMinutes Int
  calories               Int?
  servings               Int
  difficulty             RecipeDifficulty
  isGlutenFree           Boolean              @default(false)
  isSugarFree            Boolean              @default(false)
  mealCategories         MealCategory[]
  slug                   String               @unique
  breakfastMealPlans     MealPlan[]           @relation("BreakfastMeal")
  dinnerMealPlans        MealPlan[]           @relation("DinnerMeal")
  lunchMealPlans         MealPlan[]           @relation("LunchMeal")
  ingredients            RecipeIngredient[]
  favoriteRecipes        UserFavoriteRecipe[]
}

model RecipeIngredient {
  id          String  @id @default(cuid())
  name        String
  weightGrams Int?
  quantity    Float?
  unit        String?
  recipeId    String
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}

model UserFavoriteWorkout {
  id        String   @id @default(cuid())
  userId    String
  workoutId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout   Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  @@unique([userId, workoutId])
  @@index([userId])
}

model UserFavoriteRecipe {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
}

model User {
  id                 String                  @id @default(cuid())
  email              String                  @unique
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  emailVerified      DateTime?
  image              String?
  name               String?
  role               ROLE                    @default(USER)
  password           String?
  accounts           Account[]
  sessions           Session[]
  enrollments        UserCourseEnrollment[]
  userDailyPlans     UserDailyPlan[]
  favoriteRecipes    UserFavoriteRecipe[]
  favoriteWorkouts   UserFavoriteWorkout[]
  workoutCompletions UserWorkoutCompletion[]
}

model ContentBlock {
  id          String    @id @default(cuid())
  type        BlockType
  text        String?
  dailyPlanId String
  dailyPlan   DailyPlan @relation(fields: [dailyPlanId], references: [id], onDelete: Cascade)
}

model CourseDependency {
  id          String @id @default(cuid())
  courseId    String
  dependsOnId String
  course      Course @relation("CourseDependencies", fields: [courseId], references: [id], onDelete: Cascade)
  dependsOn   Course @relation("CourseDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([courseId, dependsOnId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String

  @@id([email, token])
}

model PasswordResetToken {
  email   String
  token   String   @unique
  expires DateTime

  @@id([email, token])
}

model CourseProduct {
  id       String     @id @default(cuid())
  access   AccessType
  price    Int?
  accessDurationDays  Int?
  courseId String     @unique
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String       @id @default(cuid())
  userId    String
  userEmail String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  state     PaymentState
  products  Product[]
}

model UserAccess {
  id           String                @id @default(cuid())
  userId       String
  adminId      String?
  courseId     String
  contentType           CourseContentType
  reason       UserAccessReason
  setupCompleted Boolean              @default(false)
  expiresAt    DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  enrollmentId String?               @unique
  enrollment   UserCourseEnrollment? @relation(fields: [enrollmentId], references: [id], onDelete: SetNull)

  @@unique([userId, courseId, contentType])
  @@index([userId, courseId])
}

model Product {
  id        String            @id @default(cuid())
  type      CourseContentType
  sku       String
  name      String
  price     Int
  quantity  Int
  paymentId String
  payment   Payment           @relation(fields: [paymentId], references: [id])
}
