// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ROLE {
  ADMIN
  USER
}

enum BlockType {
  text
}

enum AccessType {
  free
  paid
}

enum WorkoutDifficulty {
  EASY
  MEDIUM
  HARD
}

enum MealCategory {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
  SALAD
  DESSERT
  SOUP
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
}

enum WorkoutType {
  WARMUP // Зарядка
  POSTURE // Осанка
  STRENGTH // Силовая
  MOBILITY // Мобильность
}

enum CourseContentType {
  FIXED_COURSE // Фиксированный курс
  SUBSCRIPTION_COURSE_MONTHLY // Курс для подписки
}

enum MuscleGroup {
  LEGS
  GLUTES
  UPPER_BODY
  BACK
  PELVIC_FLOOR
}

enum CompletionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Course {
  id                 String  @id @default(cuid())
  slug               String  @unique
  title              String
  description        String
  shortDescription   String?
  thumbnail          String
  image              String
  draft              Boolean
  durationWeeks Int
  product    CourseProduct?

  dailyPlans DailyPlan[] // Дни (планы) в фиксированном курсе

  enrollments        UserCourseEnrollment[]
  mealPlans          MealPlan[] 

  dependencies CourseDependency[] @relation("CourseDependencies")
  dependents   CourseDependency[] @relation("CourseDependents")
}

model UserCourseEnrollment {
  id                String       @id @default(cuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId          String
  course            Course       @relation(fields: [courseId], references: [id])

  selectedWorkoutDays DayOfWeek[]
  startDate         DateTime

  hasFeedback       Boolean      @default(false) // Куплена ли версия с обратной связью

  userDailyPlans    UserDailyPlan[] // Связь с ежедневными планами пользователя

  active            Boolean      @default(false) // Активен ли курс для пользователя
  userAccess          UserAccess?        @relation

  @@unique([userId, courseId]) // Пользователь может быть зачислен на курс только один раз
  @@index([userId, startDate])
}

model DailyPlan {
  id                 String         @id @default(cuid())
  slug               String // Например, "day-1", "day-2"
  dayNumber        Int
  weekNumber       Int
  description      String?
  contentBlocks      ContentBlock[] // Если нужны дополнительные текстовые блоки в дне

  courseId           String
  course             Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  warmupId      String
  warmup        Workout  @relation("WarmupDailyPlan", fields: [warmupId], references: [id])

  mainWorkoutId String?
  mainWorkout   Workout?  @relation("MainWorkoutDailyPlan", fields: [mainWorkoutId], references: [id])

  mealPlanId    String
  mealPlan      MealPlan @relation(fields: [mealPlanId], references: [id])

  @@unique([courseId, slug]) // Гарантирует уникальность slug для каждого курса
}

model UserDailyPlan {
  id                 String           @id @default(cuid())
  userId             String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollmentId       String
  enrollment         UserCourseEnrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  date               DateTime         // Конкретная дата плана
  dayNumberInCourse  Int              // Порядковый номер дня с startDate (от 1 до 28)
  weekNumber         Int              // Номер недели (от 1 до 4)
  dayOfWeek          DayOfWeek        // День недели

  isWorkoutDay       Boolean          // Тренировочный ли это день для пользователя

  warmupId           String
  warmup             Workout          @relation("UserDailyWarmup", fields: [warmupId], references: [id])

  mainWorkoutId      String?
  mainWorkout        Workout?         @relation("UserDailyMainWorkout", fields: [mainWorkoutId], references: [id])

  mealPlanId         String
  mealPlan           MealPlan         @relation("UserDailyMealPlan", fields: [mealPlanId], references: [id])

  warmupProgress     CompletionStatus @default(NOT_STARTED)
  mainWorkoutProgress CompletionStatus @default(NOT_STARTED)
  mealPlanProgress   CompletionStatus @default(NOT_STARTED)

  originalDailyPlanId String          // ID исходного DailyPlan, на основе которого создан этот план

  @@unique([enrollmentId, dayNumberInCourse]) // Один план на день для каждого enrollment
  @@index([enrollmentId])
  @@index([userId, date])
}

model Workout {
  id              String            @id @default(cuid())
  slug  String @unique
  title           String // Название тренировки
  type            WorkoutType // Тип тренировки: зарядка, осанка, силовая
  durationMinutes Int // Длительность тренировки в минутах
  difficulty      WorkoutDifficulty // Сложность: 1-3 звезды
  equipment       String[] // Список необходимого инвентаря
  description     String? // Описание тренировки
  videoUrl        String? // Ссылка на видео с тренировкой
  muscles    MuscleGroup[]

  warmupDailyPlans     DailyPlan[]     @relation("WarmupDailyPlan")
  mainWorkoutDailyPlans DailyPlan[]    @relation("MainWorkoutDailyPlan")
  userDailyWarmups     UserDailyPlan[] @relation("UserDailyWarmup")
  userDailyMainWorkouts UserDailyPlan[] @relation("UserDailyMainWorkout")
  favoriteWorkouts     UserFavoriteWorkout[]
}

model MealPlan {
  id          String      @id @default(cuid())
  slug               String 
  title       String
  description String?
  dailyPlans  DailyPlan[] // Связь с DailyPlan
  userDailyPlans UserDailyPlan[] @relation("UserDailyMealPlan")

  breakfastRecipeId String
  breakfastRecipe   Recipe @relation("BreakfastMeal", fields: [breakfastRecipeId], references: [id])

  courseId          String       // Foreign Key для Course
  course            Course @relation(fields: [courseId], references: [id], onDelete: Cascade) 

lunchRecipeId     String
lunchRecipe       Recipe @relation("LunchMeal", fields: [lunchRecipeId], references: [id])

dinnerRecipeId    String
dinnerRecipe      Recipe @relation("DinnerMeal", fields: [dinnerRecipeId], references: [id])

@@unique([courseId, slug])
@@index([courseId])
}

model Recipe {
  id                     String             @id @default(cuid())
  slug String @unique
  title                  String // Название рецепта
  description            String? // Описание рецепта
  preparationTimeMinutes Int // Время приготовления в минутах
  calories               Int? // Сколько калорий
  servings               Int // Количество порций
  difficulty             RecipeDifficulty // Сложность приготовления
  isGlutenFree           Boolean            @default(false)
  isSugarFree            Boolean            @default(false)
  mealCategories         MealCategory[] // Категории приема пищи
  ingredients            RecipeIngredient[] // Список ингредиентов

 breakfastMealPlans     MealPlan[]         @relation("BreakfastMeal")
  lunchMealPlans         MealPlan[]         @relation("LunchMeal")
  dinnerMealPlans        MealPlan[]         @relation("DinnerMeal")
  favoriteRecipes        UserFavoriteRecipe[]
}

model RecipeIngredient {
  id          String  @id @default(cuid())
  name        String
  weightGrams Int?
  quantity    Float?
  unit        String?
  recipeId    String
  recipe      Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([recipeId])
}


model UserFavoriteWorkout {
  id        String  @id @default(cuid())
  userId    String
  workoutId String
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, workoutId])
  @@index([userId])
}

model UserFavoriteRecipe {
  id        String  @id @default(cuid())
  userId    String
  recipeId  String
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          ROLE      @default(USER)
  accounts      Account[]
  sessions      Session[]

  enrollments         UserCourseEnrollment[]
  userDailyPlans      UserDailyPlan[]
  favoriteWorkouts    UserFavoriteWorkout[]
  favoriteRecipes     UserFavoriteRecipe[]

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ContentBlock {
  id          String    @id @default(cuid())
  type        BlockType
  text        String?
  dailyPlanId String
  dailyPlan   DailyPlan @relation(fields: [dailyPlanId], references: [id], onDelete: Cascade)
}

model CourseDependency {
  id          String @id @default(cuid())
  courseId    String
  dependsOnId String

  course    Course @relation("CourseDependencies", fields: [courseId], references: [id], onDelete: Cascade)
  dependsOn Course @relation("CourseDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([courseId, dependsOnId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  email   String
  token   String   @unique
  expires DateTime

  @@id([email, token])
}

model PasswordResetToken {
  email   String
  token   String   @unique
  expires DateTime

  @@id([email, token])
}

model OrderItem {
  id        String      @id @default(cuid())
  type      ProductType
  sku       String
  name      String
  price     Int
  quantity  Int
  paymentId String
  payment   Payment     @relation(fields: [paymentId], references: [id])
  hasFeedback Boolean @default(false)
}

model CourseProduct {
  id       String     @id @default(cuid())
  access   AccessType
  price    Int?
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String     @unique
}

enum ProductType {
  course
  subscription
}

model Payment {
  id        String        @id @default(cuid())
  userId    String
  userEmail String
  products  OrderItem[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  state    PaymentState
}

enum PaymentState {
  pending
  success
  failed
}

model UserAccess {
  id        String        @id @default(cuid())
  userId    String
  adminId   String?
  courseId  String
  type UserAccessType
  reason UserAccessReason
  expiresAt DateTime?   

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

   enrollmentId       String @unique
  enrollment          UserCourseEnrollment? @relation(fields: [enrollmentId], references: [id])
}

enum UserAccessType {
  course
}

enum UserAccessReason {
  paid
  free
  manual
}