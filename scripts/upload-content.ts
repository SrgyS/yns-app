import 'dotenv/config';
import { PrismaClient } from '@prisma/client';
import * as path from 'path';
import { contentParser } from '../src/shared/api/content';
import manifestSchema from '../src/shared/api/content/_schemas/manifest.schema.json';
import courseSchema from '../src/shared/api/content/_schemas/course.schema.json';
import dailyPlanSchema from '../src/shared/api/content/_schemas/daily-plan.schema.json';
import workoutSchema from '../src/shared/api/content/_schemas/workout.schema.json';
import mealPlanSchema from '../src/shared/api/content/_schemas/meal-plan.schema.json';
import recipeSchema from '../src/shared/api/content/_schemas/recipe.schema.json';
import { ParsingError, ValidationError } from '../src/shared/lib/errors';
import { Course } from '@/shared/api/content/_schemas/course.schema';

export type KinescopePoster = {
  id: string;
  status?: 'done' | 'processing' | 'error';
  active?: boolean;
  original: string;
  md?: string;
  sm?: string;
  xs?: string;
  [k: string]: unknown;
};

type KinescopeVideo = {
  duration?: number | null;
  progress?: number | null;
  poster?: KinescopePoster | null;
};

type Envelope<T> = { data: T };

function unwrap<T>(payload: Envelope<T> | T): T {
  return (payload as Envelope<T>)?.data ?? (payload as T);
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏–∑ Kinescope
async function fetchKinescopeVideoMetadata(
  videoId: string
): Promise<KinescopeVideo | null> {
  const apiKey = process.env.KINESCOPE_API_KEY;
  if (!apiKey) throw new Error('KINESCOPE_API_KEY is not set');
  try {
    const resp = await fetch(`https://api.kinescope.io/v1/videos/${videoId}`, {
      headers: {
        Authorization: `Bearer ${apiKey}`,
      },
      cache: 'no-store',
    });
    if (!resp.ok) {
      console.warn(
        `  üü° –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Kinescope –¥–ª—è videoId=${videoId}: ${resp.status} ${resp.statusText}`
      );
      return null;
    }

    const payload = (await resp.json()) as
      | Envelope<KinescopeVideo>
      | KinescopeVideo;
    const v = unwrap(payload);

    const duration =
      typeof v.duration === 'number' ? Math.round(v.duration) : undefined;
    const progress =
      typeof v.progress === 'number' ? Math.round(v.progress) : undefined;
    const poster = v.poster ?? undefined;

    return { duration, poster, progress };
  } catch (e) {
    console.warn(
      `  üü° –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Kinescope –¥–ª—è videoId=${videoId}:`,
      e
    );
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML-—Ñ–∞–π–ª–∞
async function downloadAndParseValidatedYaml<T>(
  relativePath: string,
  schema: object
): Promise<T | null> {
  const fetchUrl = `${process.env.CONTENT_URL}/${relativePath}`;
  const slug = path.basename(relativePath, '.yaml');

  try {
    const response = await fetch(fetchUrl, {
      headers: {
        Authorization: `token ${process.env.CONTENT_TOKEN}`,
        Accept: 'application/vnd.github.v3.raw',
      },
    });

    if (!response.ok) {
      if (response.status === 404) {
        console.warn(`  üü° –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É ${fetchUrl}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
        return null;
      }
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${fetchUrl}: ${response.status} ${response.statusText}`
      );
    }

    const text = await response.text();
     const parsedData = await contentParser.parse<T>(text, schema);
     (parsedData as any).slug = slug;
     return parsedData;
  } catch (error) {
    if (error instanceof ValidationError) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è ${fetchUrl}:`);
    } else if (error instanceof ParsingError) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è ${fetchUrl}: ${error.message}`);
    } else {
      console.error(
        `  ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fetchUrl}:`,
        error
      );
    }
    return null;
  }
}

async function listAllEntityFiles() {
  const manifest = await downloadAndParseValidatedYaml<any>(
    'manifest.yaml',
    manifestSchema
  );
  if (!manifest) {
    throw new Error('Could not download or parse manifest.yaml');
  }
  return {
    recipes: manifest.recipes || [],
    workouts: manifest.workouts || [],
    courses: manifest.courses || [],
  };
}

async function downloadAndUploadContent() {
  const dbClient = new PrismaClient();
  try {
    console.log('üöÄ –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');

    const allEntities = await listAllEntityFiles();
    console.log(
      `üîç –ù–∞–π–¥–µ–Ω–æ ${allEntities.recipes.length} —Ä–µ—Ü–µ–ø—Ç–æ–≤, ${allEntities.workouts.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ ${allEntities.courses.length} –∫—É—Ä—Å–æ–≤.`
    );

    console.log('üç≥ –ò–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤...');
    for (const recipeSlug of allEntities.recipes) {
      const recipeRelativePath = `recipes/${recipeSlug}.yaml`;
      const recipeData = await downloadAndParseValidatedYaml<any>(
        recipeRelativePath,
        recipeSchema
      );
      if (recipeData) {
        const ingredients = Array.isArray(recipeData.ingredients)
          ? (recipeData.ingredients as Array<{
              name: string;
              weightGrams?: number | null;
              quantity?: number | null;
              unit?: string | null;
            }>)
          : [];

        const recipeRecord = await dbClient.recipe.upsert({
          where: { slug: recipeSlug },
          update: {
            title: recipeData.title,
            description: recipeData.description,
            preparationTimeMinutes: recipeData.preparationTimeMinutes,
            calories: recipeData.calories,
            servings: recipeData.servings,
            difficulty: recipeData.difficulty,
            isGlutenFree: recipeData.isGlutenFree,
            isSugarFree: recipeData.isSugarFree,
            mealCategories: recipeData.mealCategories,
          },
          create: {
            slug: recipeSlug,
            title: recipeData.title,
            description: recipeData.description,
            preparationTimeMinutes: recipeData.preparationTimeMinutes,
            calories: recipeData.calories,
            servings: recipeData.servings,
            difficulty: recipeData.difficulty,
            isGlutenFree: recipeData.isGlutenFree,
            isSugarFree: recipeData.isSugarFree,
            mealCategories: recipeData.mealCategories,
          },
        });

        // –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ YAML
        await dbClient.recipeIngredient.deleteMany({ where: { recipeId: recipeRecord.id } });
        if (ingredients.length > 0) {
          await dbClient.recipeIngredient.createMany({
            data: ingredients.map((ing) => ({
              name: ing.name,
              weightGrams: ing.weightGrams ?? null,
              quantity: ing.quantity ?? null,
              unit: ing.unit ?? null,
              recipeId: recipeRecord.id,
            })),
          });
        }

        console.log(`  ‚úÖ –†–µ—Ü–µ–ø—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${recipeData.title}`);
      }
    }

    console.log('üí™ –ò–º–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');
    for (const workoutSlug of allEntities.workouts) {
      const workoutRelativePath = `workouts/${workoutSlug}.yaml`;
      const workoutData = await downloadAndParseValidatedYaml<any>(
        workoutRelativePath,
        workoutSchema
      );
      if (workoutData) {
        let kinescopeMeta = null;
        if (workoutData.videoId && process.env.KINESCOPE_API_KEY) {
          kinescopeMeta = await fetchKinescopeVideoMetadata(
            workoutData.videoId
          );
        }

        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const { slug, ...restData } = workoutData;

        const dataForUpsert = {
          ...restData,
          durationSec: kinescopeMeta?.duration,
          progress: kinescopeMeta?.progress,
          poster: kinescopeMeta?.poster,
          posterUrl: kinescopeMeta?.poster?.original,
        };

        await dbClient.workout.upsert({
          where: { slug: workoutSlug },
          update: dataForUpsert,
          create: {
            slug: workoutSlug,
            ...dataForUpsert,
          },
        });
        console.log(`  ‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${workoutData.title}`);
      }
    }

    console.log('üìö –ò–º–ø–æ—Ä—Ç –∫—É—Ä—Å–æ–≤...');
    for (const courseSlug of allEntities.courses) {
      const courseRelativePath = `courses/${courseSlug}/course.yaml`;
      const courseData = await downloadAndParseValidatedYaml<Course>(
        courseRelativePath,
        courseSchema
      );
      if (!courseData) continue;

      console.log(`
üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É—Ä—Å–∞: ${courseData.title} (${courseSlug})`);
      console.log(`  –¢–∏–ø –∫—É—Ä—Å–∞: ${courseData.contentType || 'FIXED_COURSE'}`);

      const course = await dbClient.course.upsert({
        where: { slug: courseSlug },
        update: {
          title: courseData.title,
          description: courseData.description,
          shortDescription: courseData.shortDescription,
          thumbnail: courseData.thumbnail,
          image: courseData.image,
          draft: courseData.draft,
          durationWeeks: courseData.durationWeeks,
          minWorkoutDaysPerWeek: courseData.minWorkoutDaysPerWeek,
          contentType: courseData.contentType || 'FIXED_COURSE',
        },
        create: {
          slug: courseSlug,
          title: courseData.title,
          description: courseData.description,
          shortDescription: courseData.shortDescription,
          thumbnail: courseData.thumbnail,
          image: courseData.image,
          draft: courseData.draft,
          durationWeeks: courseData.durationWeeks,
          minWorkoutDaysPerWeek: courseData.minWorkoutDaysPerWeek,
          contentType: courseData.contentType || 'FIXED_COURSE',
        },
      });
      console.log(
        `  ‚úÖ –ö—É—Ä—Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${courseData.title} (ID: ${course.id})`
      );

      console.log(`  üçΩÔ∏è –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–∞ "${courseSlug}"...`);
      const mealPlanSlugs: string[] = courseData.mealPlans || [];
      for (const mealPlanSlug of mealPlanSlugs) {
        const mealPlanRelativePath = `courses/${courseSlug}/meal-plans/${mealPlanSlug}.yaml`;
        const mealPlanData = await downloadAndParseValidatedYaml<any>(
          mealPlanRelativePath,
          mealPlanSchema
        );
        if (mealPlanData) {
          const breakfastRecipe = await dbClient.recipe.findUnique({
            where: { slug: mealPlanData.breakfastRecipeId },
          });
          const lunchRecipe = await dbClient.recipe.findUnique({
            where: { slug: mealPlanData.lunchRecipeId },
          });
          const dinnerRecipe = await dbClient.recipe.findUnique({
            where: { slug: mealPlanData.dinnerRecipeId },
          });

          if (!breakfastRecipe || !lunchRecipe || !dinnerRecipe) {
            console.error(
              `    ‚ùå –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è ${mealPlanData.slug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            );
            continue;
          }

          await dbClient.mealPlan.upsert({
            where: { courseId_slug: { courseId: course.id, slug: mealPlanData.slug } },
            update: {
              title: mealPlanData.title,
              description: mealPlanData.description,
              breakfastRecipeId: breakfastRecipe.id,
              lunchRecipeId: lunchRecipe.id,
              dinnerRecipeId: dinnerRecipe.id,
            },
            create: {
              slug: mealPlanData.slug,
              title: mealPlanData.title,
              description: mealPlanData.description,
              courseId: course.id,
              breakfastRecipeId: breakfastRecipe.id,
              lunchRecipeId: lunchRecipe.id,
              dinnerRecipeId: dinnerRecipe.id,
            },
          });
          console.log(`    ‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${mealPlanData.slug}`);
        }
      }

      console.log(`  üóìÔ∏è –ò–º–ø–æ—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫—É—Ä—Å–∞ "${courseSlug}"...`);
      let dailyPlanSlugsToProcess: string[] = courseData.dailyPlans || [];
      
      if (course.contentType === 'SUBSCRIPTION_COURSE_MONTHLY') {
        console.log('  - –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫—É—Ä—Å–æ–≤-–ø–æ–¥–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        const allDailyPlansData = await Promise.all(
          dailyPlanSlugsToProcess.map(slug =>
            downloadAndParseValidatedYaml<any>(
              `courses/${courseSlug}/daily-plans/${slug}.yaml`,
              dailyPlanSchema
            )
          )
        );

        const validPlans = allDailyPlansData.filter(p => p && typeof p.weekNumber === 'number');

        if (validPlans.length > 0) {
          const latestWeek = Math.max(...validPlans.map(p => p.weekNumber));
          const weekWindow = 4;
          const firstValidWeek = Math.max(1, latestWeek - weekWindow + 1);
          
          console.log(`    - –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è: ${latestWeek}`);
          console.log(`    - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–∫–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –Ω–µ–¥–µ–ª–∏ —Å ${firstValidWeek} –ø–æ ${latestWeek}`);

          const { count } = await dbClient.dailyPlan.deleteMany({
            where: {
              courseId: course.id,
              weekNumber: {
                lt: firstValidWeek,
              },
            },
          });
          if (count > 0) {
            console.log(`    - –£–¥–∞–ª–µ–Ω–æ ${count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.`);
          }

          dailyPlanSlugsToProcess = validPlans
            .filter(p => p.weekNumber >= firstValidWeek)
            .map(p => p.slug);
            
          console.log(`    - –ö –∏–º–ø–æ—Ä—Ç—É/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –≥–æ—Ç–æ–≤–æ ${dailyPlanSlugsToProcess.length} –ø–ª–∞–Ω–æ–≤.`);
        }
      }

      for (const dailyPlanSlug of dailyPlanSlugsToProcess) {
        const dailyPlanRelativePath = `courses/${courseSlug}/daily-plans/${dailyPlanSlug}.yaml`;
        const dailyPlanData = await downloadAndParseValidatedYaml<any>(
          dailyPlanRelativePath,
          dailyPlanSchema
        );

        if (dailyPlanData) {
          const warmupWorkout = await dbClient.workout.findUnique({ where: { slug: dailyPlanData.warmupId } });
          const mainWorkout = dailyPlanData.mainWorkoutId ? await dbClient.workout.findUnique({ where: { slug: dailyPlanData.mainWorkoutId } }) : null;
          const mealPlan = dailyPlanData.mealPlanId
            ? await dbClient.mealPlan.findUnique({ where: { courseId_slug: { courseId: course.id, slug: dailyPlanData.mealPlanId } } })
            : null;

          if (!warmupWorkout || (dailyPlanData.mainWorkoutId && !mainWorkout)) {
            console.error(`    ‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è ${dailyPlanSlug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
            continue;
          }

          if (dailyPlanData.mealPlanId && !mealPlan) {
            console.warn(
              `    üü° –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è '${dailyPlanData.mealPlanId}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ ${dailyPlanSlug}. –°–≤—è–∑—å mealPlan –±—É–¥–µ—Ç –æ–ø—É—â–µ–Ω–∞/–æ—á–∏—â–µ–Ω–∞.`
            );
          }

          const dailyPlanUpdateData = {
            dayNumber: dailyPlanData.dayNumber,
            weekNumber: dailyPlanData.weekNumber,
            description: dailyPlanData.description,
            warmup: { connect: { id: warmupWorkout.id } },
            ...(dailyPlanData.mainWorkoutId
              ? { mainWorkout: { connect: { id: (mainWorkout as { id: string }).id } } }
              : { mainWorkout: { disconnect: true } }),
            ...(mealPlan
              ? { mealPlan: { connect: { id: mealPlan.id } } }
              : { mealPlan: { disconnect: true } }),
          };

          const dailyPlanCreateData = {
            slug: dailyPlanData.slug,
            dayNumber: dailyPlanData.dayNumber,
            weekNumber: dailyPlanData.weekNumber,
            description: dailyPlanData.description,
            course: { connect: { id: course.id } },
            warmup: { connect: { id: warmupWorkout.id } },
            ...(dailyPlanData.mainWorkoutId && mainWorkout
              ? { mainWorkout: { connect: { id: mainWorkout.id } } }
              : {}),
            ...(mealPlan ? { mealPlan: { connect: { id: mealPlan.id } } } : {}),
          };

          const upsertedPlan = await dbClient.dailyPlan.upsert({
            where: { courseId_slug: { courseId: course.id, slug: dailyPlanData.slug } },
            update: dailyPlanUpdateData,
            create: dailyPlanCreateData,
            include: { contentBlocks: true }
          });

          await dbClient.contentBlock.deleteMany({ where: { dailyPlanId: upsertedPlan.id }});
          if (dailyPlanData.contentBlocks && dailyPlanData.contentBlocks.length > 0) {
            await dbClient.contentBlock.createMany({
              data: dailyPlanData.contentBlocks.map((block: any) => ({
                ...block,
                dailyPlanId: upsertedPlan.id,
              })),
            });
          }
          console.log(`    ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${dailyPlanData.slug}`);
        }
      }
    }

    console.log('\nüéâ –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞:', error);
    process.exit(1);
  } finally {
    await dbClient.$disconnect();
  }
}

downloadAndUploadContent()
  .then(() => console.log('–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!'))
  .catch(error => console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error));
