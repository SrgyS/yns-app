import 'dotenv/config'
import { dbClient } from '../src/shared/lib/db'
import * as path from 'path'
import { contentParser } from '../src/shared/api/content'
import manifestSchema from '../src/shared/api/content/_schemas/manifest.schema.json'
import courseSchema from '../src/shared/api/content/_schemas/course.schema.json'
import dailyPlanSchema from '../src/shared/api/content/_schemas/daily-plan.schema.json'
import workoutSchema from '../src/shared/api/content/_schemas/workout.schema.json'
import mealPlanSchema from '../src/shared/api/content/_schemas/meal-plan.schema.json'
import recipeSchema from '../src/shared/api/content/_schemas/recipe.schema.json'
import { ParsingError, ValidationError } from '../src/shared/lib/errors'


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML-—Ñ–∞–π–ª–∞
async function downloadAndParseValidatedYaml<T>(
  relativePath: string,
  schema: object,
  addSlug: boolean = true,
   explicitSlug?: string
): Promise<T | null> {
  const fetchUrl = `${process.env.CONTENT_URL}/${relativePath}`
  const slug =  explicitSlug || path.basename(relativePath, '.yaml')

  try {
    const response = await fetch(fetchUrl, {
      headers: {
        Authorization: `token ${process.env.CONTENT_TOKEN}`,
        Accept: 'application/vnd.github.v3.raw',
      },
    })

    if (!response.ok) {
      if (response.status === 404) {
        console.warn(`  üü° –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É ${fetchUrl}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`)
        return null
      }
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ${fetchUrl}: ${response.status} ${response.statusText}`
      )
    }

    const text = await response.text()
    console.log({ text })
    const parsedData = await contentParser.parse<T>(
      text,
      schema,
      addSlug
        ? {
            slug,
          }
        : undefined
    );

    if (addSlug) (parsedData as any).slug = slug


    return parsedData
  } catch (error) {
    if (error instanceof ValidationError) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è ${fetchUrl}:`)
    } else if (error instanceof ParsingError) {
      console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–ª—è ${fetchUrl}: ${error.message}`)
    } else {
      console.error(
        `  ‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${fetchUrl}:`,
        error
      )
    }
    return null
  }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ò–ó–ú–ï–ù–ï–ù–ò–Ø –ó–î–ï–°–¨) ---
async function downloadAndUploadContent(): Promise<void> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...')
  try {
    // --- 0. –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ ---
    const manifestRelativePath = 'manifest.yaml'
    console.log(`\nüìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ ...`)
    const globalManifest = await downloadAndParseValidatedYaml<any>(
      manifestRelativePath,
      manifestSchema,
      false
    )

    if (!globalManifest) {
      console.error(
        'üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç. –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.'
      )
      process.exit(1)
    }
    console.log('  ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω.')

    // 1. –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö Workouts
    console.log('\nüèãÔ∏è –ò–º–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (Workouts)...')
    const workoutSlugs: string[] = globalManifest.workouts || []
    for (const slug of workoutSlugs) {
      const relativePath = `workouts/${slug}.yaml`
      const workoutData = await downloadAndParseValidatedYaml<any>(
        relativePath,
        workoutSchema
      )
      if (workoutData) {
        await dbClient.workout.upsert({
          where: { slug: workoutData.slug },
          update: {
            title: workoutData.title,
            type: workoutData.type,
            durationMinutes: workoutData.durationMinutes,
            difficulty: workoutData.difficulty,
            equipment: workoutData.equipment,
            description: workoutData.description,
            videoUrl: workoutData.videoUrl,
            muscles: workoutData.muscles,
          },
          create: {
            slug: workoutData.slug,
            title: workoutData.title,
            type: workoutData.type,
            durationMinutes: workoutData.durationMinutes,
            difficulty: workoutData.difficulty,
            equipment: workoutData.equipment,
            description: workoutData.description,
            videoUrl: workoutData.videoUrl,
            muscles: workoutData.muscles,
          },
        })
        console.log(
          `  ‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${workoutData.slug}`
        )
      }
    }

    // 2. –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö Recipes
    console.log('\nüç≥ –ò–º–ø–æ—Ä—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ (Recipes)...')
    const recipeSlugs: string[] = globalManifest.recipes || []
    for (const slug of recipeSlugs) {
      const relativePath = `recipes/${slug}.yaml`
      const recipeData = await downloadAndParseValidatedYaml<any>(
        relativePath,
        recipeSchema
      )
      if (recipeData) {
        await dbClient.recipe.upsert({
          where: { slug: recipeData.slug },
          update: {
            title: recipeData.title,
            description: recipeData.description,
            preparationTimeMinutes: recipeData.preparationTimeMinutes,
            calories: recipeData.calories,
            servings: recipeData.servings,
            difficulty: recipeData.difficulty,
            isGlutenFree: recipeData.isGlutenFree,
            isSugarFree: recipeData.isSugarFree,
            mealCategories: recipeData.mealCategories,
            ingredients: {
              deleteMany: {},
              create:
                recipeData.ingredients?.map((ing: any) => ({
                  name: ing.name,
                  weightGrams: ing.weightGrams,
                  quantity: ing.quantity,
                  unit: ing.unit,
                })) || [],
            },
          },
          create: {
            slug: recipeData.slug,
            title: recipeData.title,
            description: recipeData.description,
            preparationTimeMinutes: recipeData.preparationTimeMinutes,
            calories: recipeData.calories,
            servings: recipeData.servings,
            difficulty: recipeData.difficulty,
            isGlutenFree: recipeData.isGlutenFree,
            isSugarFree: recipeData.isSugarFree,
            mealCategories: recipeData.mealCategories,
            ingredients: {
              create:
                recipeData.ingredients?.map((ing: any) => ({
                  name: ing.name,
                  weightGrams: ing.weightGrams,
                  quantity: ing.quantity,
                  unit: ing.unit,
                })) || [],
            },
          },
        })
        console.log(`  ‚úÖ –†–µ—Ü–µ–ø—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${recipeData.slug}`)
      }
    }

    // 3. –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö Courses (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ DailyPlans –∏ MealPlans)
    console.log(
      '\nüìö –ò–º–ø–æ—Ä—Ç –∫—É—Ä—Å–æ–≤ (Courses), –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ DailyPlans –∏ MealPlans...'
    )
    const courseSlugs: string[] = globalManifest.courses || []
    for (const courseSlug of courseSlugs) {
      // –ò–°–ü–û–õ–¨–ó–£–ï–ú courseSlug –ó–î–ï–°–¨
      const courseRelativePath = `courses/${courseSlug}/course.yaml`
      const courseData = await downloadAndParseValidatedYaml<any>(
        courseRelativePath,
        courseSchema,
        true,
        courseSlug 
      )

      if (!courseData) {
        console.error(
          `  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ö—É—Ä—Å —Å–æ —Å–ª–∞–≥–æ–º ${courseSlug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
        )
        continue
      }

      await dbClient.course.upsert({
        where: { slug: courseSlug },
        update: {
          title: courseData.title,
          description: courseData.description,
          shortDescription: courseData.shortDescription,
          thumbnail: courseData.thumbnail,
          image: courseData.image,
          draft: courseData.draft,
          durationWeeks: courseData.durationWeeks,
        },
        create: {
          slug: courseSlug,
          title: courseData.title,
          description: courseData.description,
          shortDescription: courseData.shortDescription,
          thumbnail: courseData.thumbnail,
          image: courseData.image,
          draft: courseData.draft,
          durationWeeks: courseData.durationWeeks,
        },
      })
      console.log(
        `  ‚úÖ –ö—É—Ä—Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${courseData.title} (Slug: ${courseSlug})`
      )

      // 4. –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö MealPlans –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
      console.log(`  üçΩÔ∏è –ò–º–ø–æ—Ä—Ç –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∫—É—Ä—Å–∞ "${courseSlug}"...`)
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ courseData.mealPlanSlugs —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–∞–≥–æ–≤ –ø–ª–∞–Ω–æ–≤ –ø–∏—Ç–∞–Ω–∏—è
      const mealPlanSlugs: string[] = courseData.mealPlans || []
      for (const mealPlanSlug of mealPlanSlugs) {
        // –ü—É—Ç—å: courses/<courseSlug>/meal-plans/<mealPlanSlug>.yaml
        const mealPlanRelativePath = `courses/${courseSlug}/meal-plans/${mealPlanSlug}.yaml`
        const mealPlanData = await downloadAndParseValidatedYaml<any>(
          mealPlanRelativePath,
          mealPlanSchema
        )

        if (mealPlanData) {
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ courseSlug –≤ —Å–∞–º–æ–º mealPlan.yaml —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º courseSlug
          if (mealPlanData.courseSlug !== courseSlug) {
            console.warn(
              `    ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: courseSlug –≤ —Ñ–∞–π–ª–µ ${mealPlanRelativePath} (${mealPlanData.courseSlug}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å–ª–∞–≥–æ–º –ø–∞–ø–∫–∏ –∫—É—Ä—Å–∞ (${courseSlug}). –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–∞–≥ –ø–∞–ø–∫–∏.`
            )
            mealPlanData.courseSlug = courseSlug // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–ª–∞–≥ –∫—É—Ä—Å–∞
          }

          const course = await dbClient.course.findUnique({
            where: { slug: mealPlanData.courseSlug },
          })
          if (!course) {
            console.error(
              `    ‚ùå –û—à–∏–±–∫–∞: –ö—É—Ä—Å "${mealPlanData.courseSlug}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è ${mealPlanData.slug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            )
            continue
          }

          const breakfastRecipe = await dbClient.recipe.findUnique({
            where: { slug: mealPlanData.breakfastRecipeId },
          })
          const lunchRecipe = await dbClient.recipe.findUnique({
            where: { slug: mealPlanData.lunchRecipeId },
          })
          const dinnerRecipe = await dbClient.recipe.findUnique({
            where: { slug: mealPlanData.dinnerRecipeId },
          })

          if (!breakfastRecipe || !lunchRecipe || !dinnerRecipe) {
            console.error(
              `    ‚ùå –û—à–∏–±–∫–∞: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–ª–∞–Ω–∞ –ø–∏—Ç–∞–Ω–∏—è ${mealPlanData.slug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            )
            continue
          }

          await dbClient.mealPlan.upsert({
            where: {
              courseId_slug: { courseId: course.id, slug: mealPlanData.slug },
            },
            update: {
              title: mealPlanData.title,
              description: mealPlanData.description,
              breakfastRecipe: { connect: { id: breakfastRecipe.id } },
              lunchRecipe: { connect: { id: lunchRecipe.id } },
              dinnerRecipe: { connect: { id: dinnerRecipe.id } },
            },
            create: {
              slug: mealPlanData.slug,
              title: mealPlanData.title,
              description: mealPlanData.description,
              course: { connect: { id: course.id } },
              breakfastRecipe: { connect: { id: breakfastRecipe.id } },
              lunchRecipe: { connect: { id: lunchRecipe.id } },
              dinnerRecipe: { connect: { id: dinnerRecipe.id } },
            },
          })
          console.log(
            `    ‚úÖ –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${mealPlanData.slug}`
          )
        }
      }

      // 5. –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö DailyPlans –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
      console.log(`  üóìÔ∏è –ò–º–ø–æ—Ä—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –¥–ª—è –∫—É—Ä—Å–∞ "${courseSlug}"...`)
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ courseData.dailyPlanSlugs —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
      const dailyPlanSlugs: string[] = courseData.dailyPlans || []
      for (const dailyPlanSlug of dailyPlanSlugs) {
        // –ü—É—Ç—å: courses/<courseSlug>/daily-plans/<dailyPlanSlug>.yaml
        const dailyPlanRelativePath = `courses/${courseSlug}/daily-plans/${dailyPlanSlug}.yaml`
        const dailyPlanData = await downloadAndParseValidatedYaml<any>(
          dailyPlanRelativePath,
          dailyPlanSchema
        )

        if (dailyPlanData) {
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ courseSlug –≤ —Å–∞–º–æ–º dailyPlan.yaml —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º courseSlug
          if (dailyPlanData.courseSlug !== courseSlug) {
            console.warn(
              `    ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: courseSlug –≤ —Ñ–∞–π–ª–µ ${dailyPlanRelativePath} (${dailyPlanData.courseSlug}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å–ª–∞–≥–æ–º –ø–∞–ø–∫–∏ –∫—É—Ä—Å–∞ (${courseSlug}). –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–∞–≥ –ø–∞–ø–∫–∏.`
            )
            dailyPlanData.courseSlug = courseSlug // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–ª–∞–≥ –∫—É—Ä—Å–∞
          }

          const course = await dbClient.course.findUnique({
            where: { slug: dailyPlanData.courseSlug },
          })
          if (!course) {
            console.error(
              `    ‚ùå –û—à–∏–±–∫–∞: –ö—É—Ä—Å "${dailyPlanData.courseSlug}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ ${dailyPlanData.slug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            )
            continue
          }

          const warmupWorkout = await dbClient.workout.findUnique({
            where: { slug: dailyPlanData.warmupId },
          })
          const mainWorkout = dailyPlanData.mainWorkoutId
            ? await dbClient.workout.findUnique({
                where: { slug: dailyPlanData.mainWorkoutId },
              })
            : null
          const mealPlan = await dbClient.mealPlan.findUnique({
            where: {
              courseId_slug: {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á, —Ç–∞–∫ –∫–∞–∫ mealPlan –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫—É—Ä—Å—É
                courseId: course.id,
                slug: dailyPlanData.mealPlanId,
              },
            },
          })

          if (!warmupWorkout) {
            console.error(
              `    ‚ùå –û—à–∏–±–∫–∞: –†–∞–∑–º–∏–Ω–∫–∞ "${dailyPlanData.warmupId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ ${dailyPlanData.slug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            )
            continue
          }
          if (dailyPlanData.mainWorkoutId && !mainWorkout) {
            console.error(
              `    ‚ùå –û—à–∏–±–∫–∞: –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ "${dailyPlanData.mainWorkoutId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ ${dailyPlanData.slug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            )
            continue
          }
          if (!mealPlan) {
            console.error(
              `    ‚ùå –û—à–∏–±–∫–∞: –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è "${dailyPlanData.mealPlanId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ ${dailyPlanData.slug} –≤ –∫—É—Ä—Å–µ ${dailyPlanData.courseSlug}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.`
            )
            continue
          }

          await dbClient.dailyPlan.upsert({
            where: {
              courseId_slug: { courseId: course.id, slug: dailyPlanData.slug },
            },
            update: {
              dayNumber: dailyPlanData.dayNumber,
              weekNumber: dailyPlanData.weekNumber,
              description: dailyPlanData.description,
              warmup: { connect: { id: warmupWorkout.id } },
              mainWorkout: mainWorkout
                ? { connect: { id: mainWorkout.id } }
                : undefined,
              mealPlan: { connect: { id: mealPlan.id } },
              contentBlocks: {
                deleteMany: {},
                create:
                  dailyPlanData.contentBlocks?.map((block: any) => ({
                    type: block.type,
                    text: block.text,
                  })) || [],
              },
            },
            create: {
              slug: dailyPlanData.slug,
              dayNumber: dailyPlanData.dayNumber,
              weekNumber: dailyPlanData.weekNumber,
              description: dailyPlanData.description,
              course: { connect: { id: course.id } },
              warmup: { connect: { id: warmupWorkout.id } },
              mainWorkout: mainWorkout
                ? { connect: { id: mainWorkout.id } }
                : undefined,
              mealPlan: { connect: { id: mealPlan.id } },
              contentBlocks: {
                create:
                  dailyPlanData.contentBlocks?.map((block: any) => ({
                    type: block.type,
                    text: block.text,
                  })) || [],
              },
            },
          })
          console.log(
            `    ‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω: ${dailyPlanData.slug}`
          )
        }
      }
    } // –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –ø–æ –∫—É—Ä—Å–∞–º

    console.log('\nüéâ –£–¥–∞–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!')
  } catch (error) {
    console.error('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞:', error)
    process.exit(1)
  } finally {
    await dbClient.$disconnect()
  }
}

downloadAndUploadContent()
  .then(() => console.log('–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!'))
  .catch(error => console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error))
